    1  clear
    2  ls
    3  sudo apt install -y ca-certificates curl gnupg lsb-release
    4  sudo mkdir -p /etc/apt/keyrings
    5  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    6  echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
    7    https://download.docker.com/linux/ubuntu \
    8    $(lsb_release -cs) stable" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    9  sudo apt update
   10  sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
   11  sudo docker --version
   12  clear
   13  sudo usermod -aG docker $USER
   14  newgrp docker
   15  clear
   16  sudo apt update && sudo apt install openvpn -y
   17  openvpn --version
   18  clear
   19  sudo apt-get update
   20  sudo apt-get install -y easy-rsa
   21  clear
   22  pwd
   23  mkdir -p /home/ubuntu/easy-rsa-vpn1
   24  mkdir -p /home/ubuntu/easy-rsa-vpn2
   25  ls
   26  cd /home/ubuntu/easy-rsa-vpn1
   27  cp -r /usr/share/easy-rsa/* .
   28  ./easyrsa init-pki
   29  ls
   30  cp vars.example vars
   31  ls
   32  nano vars
   33  ./easyrsa build-ca nopass
   34  ./easyrsa gen-req server-vpn1 nopass
   35  ./easyrsa sign-req server server-vpn1
   36  ./easyrsa gen-dh
   37  ./easyrsa gen-tls-auth ta.key
   38  ls
   39  cd pki
   40  ls
   41  openvpn --genkey --secret ta.key
   42  cd private/
   43  ls
   44  cd ..
   45  ls -l pki/
   46  ls -l .
   47  cd pki
   48  ls -l pki/
   49  ls -l .
   50  cd ..
   51  ls
   52  cd pki
   53  ls
   54  cd ~
   55  ls
   56  cd /home/ubuntu/easy-rsa-vpn2
   57  cp -r /usr/share/easy-rsa/* .
   58  ./easyrsa init-pki
   59  nano vars
   60  cd /home/kali/easy-rsa-vpn2
   61  cp -r /usr/share/easy-rsa/* .
   62  ./easyrsa init-pki
   63  ls
   64  cp vars.example vars
   65  nano vars
   66  ./easyrsa build-ca nopass
   67  ./easyrsa gen-req server-vpn2 nopass
   68  ./easyrsa sign-req server server-vpn2
   69  ./easyrsa gen-dh
   70  ./easyrsa gen-tls-auth ta.key
   71  ls
   72  cd pki
   73  ls
   74  cd ..
   75  openvpn --genkey --secret ta.key
   76  ls
   77  cd pki
   78  ls
   79  clear
   80  cd ..
   81  ls
   82  cd ..
   83  ls
   84  cd easy-rsa-vpn1
   85  ls
   86  cd pki
   87  ls
   88  cd ~/easy-rsa-vpn2
   89  cd pki
   90  ls
   91  ls -l
   92  cd ..
   93  cd pri
   94  ls
   95  cd pki
   96  cd private/
   97  ls
   98  cd ..
   99  ls
  100  cd ~
  101  clear
  102  mkdir -p /home/kali/docker-proxy1/etc/openvpn1
  103  mkdir -p /home/kali/docker-proxy2/etc/openvpn2
  104  mkdir -p /home/ubuntu/docker-proxy1/etc/openvpn2
  105  clear
  106  ls
  107  mkdir -p /home/ubuntu/docker-proxy1/etc/openvpn1
  108  ls
  109  cd docker-proxy2
  110  ls
  111  cd etc
  112  ls
  113  cd ~
  114  cd docker-proxy1
  115  etc 
  116  cd etc
  117  ls
  118  cd ~
  119  cd /home/ubuntu/docker-proxy1/etc/openvpn1
  120  cp /home/ubuntu/easy-rsa-vpn1/pki/ca.crt .
  121  cp /home/ubuntu/easy-rsa-vpn1/pki/issued/server-vpn1.crt .
  122  cp /home/ubuntu/easy-rsa-vpn1/pki/private/server-vpn1.key .
  123  cp /home/ubuntu/easy-rsa-vpn1/pki/dh.pem .
  124  cp /home/ubuntu/easy-rsa-vpn1/pki/ta.key .
  125  chown -R ubuntu:ubuntu .
  126  ls
  127  cd ..
  128  cd ~
  129  cd docker-proxy2
  130  cd /home/ubuntu/docker-proxy2/etc/openvpn2
  131  cp /home/ubuntu/easy-rsa-vpn2/pki/ca.crt .
  132  cp /home/ubuntu/easy-rsa-vpn2/pki/issued/server-vpn2.crt .
  133  cp /home/ubuntu/easy-rsa-vpn2/pki/private/server-vpn2.key .
  134  cp /home/ubuntu/easy-rsa-vpn2/pki/dh.pem .
  135  cp /home/ubuntu/easy-rsa-vpn2/ta.key .
  136  chown -R ubuntu:ubuntu .
  137  ls
  138  cd ~/docker-proxy1
  139  clear
  140  nano /home/ubuntu/docker-proxy1/etc/openvpn1/server.conf
  141  nano /home/kali/docker-proxy2/etc/openvpn2/server.conf
  142  nano /home/ubuntu/docker-proxy2/etc/openvpn2/server.conf
  143  nano /home/ubuntu/docker-proxy1/Dockerfile
  144  ls
  145  cd etc
  146  l
  147  cd openvpn1/
  148  ls
  149  nano server.conf 
  150  nano /home/kali/docker-proxy2/Dockerfile
  151  nano /home/ubuntu/docker-proxy2/Dockerfile
  152  cd ..
  153  docker login -u whuy
  154  docker build -t whuy/vpn1:latest .
  155  docker build -t whuy/vpn:latest .
  156  cd /home/ubuntu/docker-proxy2
  157  docker build -t whuy/vpn2:latest .
  158  docker push whuy/vpn2:latest
  159  docker push whuy/vpn1:latest
  160  nano /home/ubuntu/proxy-node1-deployment.yaml
  161  nano /home/ubuntu/proxy-node2-deployment.yaml
  162  nano /home/ubuntu/proxy-node1-deployment.yaml
  163  nano /home/ubuntu/proxy-node2-deployment.yaml
  164  nano /home/ubuntu/proxy-node1-service.yaml
  165  nano /home/ubuntu/proxy-node1-deployment.yaml
  166  nano /home/ubuntu/proxy-node2-deployment.yaml
  167  nano /home/ubuntu/proxy-node2-service.yaml
  168  cd ~
  169  clear
  170  curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
  171  chmod +x minikube-linux-amd64
  172  sudo mv minikube-linux-amd64 /usr/local/bin/minikube
  173  sudo apt install -y kubectl
  174  sudo apt-get update
  175  sudo apt-get install -y apt-transport-https ca-certificates curl
  176  sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
  177  echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] \
  178    https://apt.kubernetes.io/ kubernetes-xenial main" |   sudo tee /etc/apt/sources.list.d/kubernetes.list > /dev/null
  179  sudo apt-get update
  180  sudo apt-get install -y kubectl
  181  minikube start
  182  kubectl
  183  sudo snap install kubectl
  184  kubectl --version
  185  sudo snap install kubectl --classic
  186  kubectl --version
  187  kubectl --help
  188  clear
  189  kubectl get pods
  190  kubectl apply -f /home/kali/proxy-node1-deployment.yaml
  191  kubectl apply -f /home/ubun/proxy-node2-deployment.yaml
  192  clear
  193  kubectl apply -f /home/ubuntu/proxy-node1-deployment.yaml
  194  kubectl apply -f /home/ubuntu/proxy-node2-deployment.yaml
  195  kubectl apply -f /home/ubuntu/proxy-node1-service.yaml
  196  kubectl apply -f /home/ubuntu/proxy-node2-service.yaml
  197  kubectl get pods
  198  kubectl exec -it proxy-node1-deployment-659b4bf45b-gz52n -- /bin/bash
  199  kubectl exec -it proxy-node1-deployment-659b4bf45b-gz52n -- openvpn --config /etc/openvpn/server.conf
  200  kubectl exec -it proxy-node1-deployment-659b4bf45b-gz52n -- openvpn --config /etc/openvpn/server.conf --verb 4
  201  kubectl exec -it proxy-node1-deployment-659b4bf45b-gz52n -- /bin/bash
  202  kubectl get nodes -o wide
  203  cleeear
  204  clear
  205  ip a
  206  clear
  207  ls
  208  pwd
  209  cd /
  210  ls
  211  clear
  212  cd /home/ubuntu
  213  clear
  214  ls
  215  clear
  216  sudo apt install openssh-server
  217  clear
  218  ip a
  219  clear
  220  ip a
  221  ls
  222  kubectl get pods
  223  minikube start
  224  kubectl get pods
  225  clear
  226  ls
  227  mkdir proxy-node
  228  ls
  229  cd proxy-node/
  230  python3 --version
  231  mkdir vpn_profiles
  232  cd vpn_profiles/
  233  nano
  234  ls
  235  wget https://www.vpngate.net/common/openvpn_download.aspx?sid=1753975665949&tcp=1&host=public-vpn-250.opengw.net&port=443&hid=15134998&/vpngate_public-vpn-250.opengw.net_tcp_443.ovpn
  236  ls
  237  rm -rf openvpn_download.aspx\?sid\=1753975665949 
  238  rm -rf wget-log 
  239  ls
  240  clear
  241  https://www.vpngate.net/common/openvpn_download.aspx?sid=1753975665949&tcp=1&host=public-vpn-250.opengw.net&port=443&hid=15134998&/vpngate_public-vpn-250.opengw.net_tcp_443.ovpn
  242  ls
  243  clear
  244  ls
  245  nano vpngate_118.68.195.78_tcp_995.ovpn
  246  clear
  247  cd proxy-node/
  248  la
  249  cd vpn_profiles/
  250  ls
  251  clear
  252  vpngate_118.68.195.78_tcp_995.ovpn
  253  nano vpngate_118.68.195.78_tcp_995.ovpn
  254  clear
  255  cd proxy-node/
  256  cd vpn_profiles/
  257  pwd
  258  ls
  259  nano vpngate_219.100.37.12_tcp_443.ovpn 
  260  ls
  261  clear
  262  ls
  263  nano proxies.txt
  264  nano main.py
  265  nano api.py
  266  kubectl version
  267  cd ..
  268  ls
  269  cd ..
  270  ls
  271  cd proxy-node/
  272  ls
  273  cd vpn_profiles/
  274  ls
  275  mv api.py ~/proxy-node/
  276  mv proxies.txt ~/proxy-node/
  277  cd ..
  278  ls
  279  uvicorn api:app --host 0.0.0.0 --port 8000 &
  280  sudo apt install uvicorn
  281  uvicorn api:app --host 0.0.0.0 --port 8000 &
  282  pip install fastapi uvicorn
  283  sudo apt install python3-pip
  284  pip install fastapi uvicorn
  285  pip3 install fastapi
  286  sudo apt install python3-venv python3-full -y
  287  pip3 install fastapi uvicorn --break-system-packages
  288  uvicorn api:app --host 0.0.0.0 --port 8000 &
  289  clear
  290  uvicorn api:app --host 0.0.0.0 --port 8000 &
  291  ls
  292  cearl
  293  clear
  294  cd proxy-node/
  295  uvicorn api:app --host 0.0.0.0 --port 8000 &
  296  clear
  297  ;s
  298  ls
  299  uvicorn api:app --host 0.0.0.0 --port 8000 &
  300  clear
  301  cd ..
  302  clear
  303  cd proxy-node/
  304  clear
  305  uvicorn api:app --host 0.0.0.0 --port 8000 &
  306  exit
  307  clear
  308  cd proxy-node/
  309  uvicorn api:app --host 0.0.0.0 --port 8000 &
  310  cleear
  311  clear
  312  uvicorn api:app --host 0.0.0.0 --port 8000 &
  313  clear
  314  cd ..
  315  cd ~
  316  cd proxy-node/
  317  ls
  318  uvicorn api:app --host 0.0.0.0 --port 8000 &
  319  clear
  320  uvicorn api:app --host 0.0.0.0 --port 8000 &
  321  sudo lsof -i :8000
  322  kill 7243
  323  ls
  324  sudo lsof -i :8000
  325  uvicorn api:app --host 0.0.0.0 --port 8000 &
  326  ls
  327  clear
  328  ls
  329  cd proxy-node/
  330  ls
  331  cd vpn_profiles/
  332  ls
  333  cd ..
  334  ls
  335  nano proxies.txt 
  336  clear
  337  ls
  338  cd proxy-node/
  339  ls
  340  cd vpn_profiles/
  341  ls
  342  cd ..
  343  ls
  344  uvicorn api:app --host 0.0.0.0 --port 8000 &
  345  ps
  346  kill 10307
  347  kill 20307
  348  ps
  349  uvicorn api:app --host 0.0.0.0 --port 8000 &
  350  ps
  351  kill 20330
  352  ps
  353  nano api.py 
  354  ps
  355  clear
  356  ps
  357  uvicorn api:app --host 0.0.0.0 --port 8000 &
  358  ls
  359  cd vpn_profiles/
  360  ls
  361  cd ..
  362  rm vpn_profiles/
  363  rm -rf vpn_profiles/
  364  ls
  365  mkdir vpn_profiles
  366  ls
  367  cd vpn_profiles/
  368  ls
  369  clear
  370  ls
  371  clear
  372  pwd
  373  ls
  374  ps
  375  clear
  376  ls
  377  clear
  378  ls
  379  cd snap
  380  ls
  381  clear
  382  cd ..
  383  clear
  384  ls
  385  clear
  386  ip a
  387  ls
  388  cd proxy-node/
  389  ls
  390  cd vpn_profiles/
  391  ls
  392  cd ..
  393  cd proxy-node/
  394  uvicorn api:app --host 0.0.0.0 --port 8000 &
  395  clear
  396  cd ..
  397  ps
  398  cd proxy-node/
  399  ls
  400  ps
  401  unicorn api:app --host 0.0.0.0 --port 8000 &
  402  uvicorn api:app --host 0.0.0.0 --port 8000 &
  403  hostname -I
  404  docker ps
  405  uvicorn api:app --host 0.0.0.0 --port 8000 &
  406  lspci | grep -i vga
  407  cat /proc/driver/nvidia/gpus/0000:00:1e.0/information
  408  ls
  409  clear
  410  sudo apt update && sudo apt upgrade -y
  411  sudo apt install -y git curl wget python3 python3-pip
  412  curl -fsSL https://ollama.com/install.sh | sh
  413  ollama pull gpt-oss:20b
  414  ollama run gpt-oss:20b
  415  clear
  416  export OLLAMA_HOST=0.0.0.0
  417  ollama serve
  418  systemctl status ollama
  419  sudo mkdir -p /etc/systemd/system/ollama.service.d
  420  sudo nano /etc/systemd/system/ollama.service.d/override.conf
  421  sudo systemctl daemon-reload
  422  sudo systemctl restart ollama
  423  ss -ltnp | grep 11434
  424  systemctl status ollama
  425  ls
  426  cd proxy-node/
  427  ls
  428  uvicorn api.py:app --host 0.0.0.0 --port 8000 &
  429  uvicorn api:app --host 0.0.0.0 --port 8000 &
  430  ls
  431  cd proxy-node/
  432  uvicorn api:app --host 0.0.0.0 --port 8000 &
  433  ls
  434  clear
  435  ls
  436  git clone https://github.com/cyb3r-Kn1ght/WSTG-to-RAG.git
  437  ls
  438  cd WSTG-to-RAG/
  439  ls
  440  cd ..
  441  clear
  442  pip install sentence-transformers faiss-cpu
  443  pip install --break-system-packages sentence-transformers faiss-cpu
  444  df -h
  445  pip install torch==2.2.0+cpu torchvision --index-url https://download.pytorch.org/whl/cpu
  446  pip install sentence-transformers faiss-cpu
  447  pip install --upgrade pip --break-system-packages
  448  pip install torch==2.2.0+cpu torchvision --index-url https://download.pytorch.org/whl/cpu --break-system-packages
  449  pip install sentence-transformers faiss-cpu --break-system-packages
  450  clear
  451  ls
  452  cd WSTG-to-RAG/
  453  ls
  454  clear
  455  ls
  456  python3 - <<'PY'
  457  import os
  458  print("Index exists:", os.path.exists("wstg.faiss"))
  459  print("Meta exists:", os.path.exists("wstg.meta.json"))
  460  PY
  461  import faiss
  462  idx = faiss.read_index("wstg.faiss")
  463  print("index d =", idx.d)
  464  python3
  465  >>> import faiss
  466  >>> idx = faiss.read_index("wstg.faiss")
  467  >>> print("index d =", idx.d)
  468  clear
  469  python3 - <<'PY'
  470  import faiss
  471  idx = faiss.read_index("wstg.faiss")
  472  print("index d =", idx.d)
  473  PY
  474  ls
  475  clear
  476  ip a
  477  ps 
  478  ps -a
  479  clear
  480  ls
  481  cd proxy-node/
  482  uvicorn api:app --host 0.0.0.0 --port 8000 &
  483  ls
  484  clear
  485  cd WSTG-to-RAG/
  486  ls
  487  python3 - <<'PY'
  488  import faiss
  489  idx = faiss.read_index("wstg.faiss")
  490  print("index d =", idx.d)
  491  PY
  492  clear
  493  python3 - <<'PY'
  494  import faiss
  495  idx = faiss.read_index("wstg.faiss")
  496  print("index d =", idx.d)
  497  PY
  498  ls
  499  nano load_index.py
  500  python3 load_index.py
  501  nano query_index.py
  502  python3 query_index.py
  503  rm -rf ~/.cache/huggingface
  504  pip install numpy==1.26.4 --break-system-packages
  505  pip install torch==2.6.0+cpu torchvision --index-url https://download.pytorch.org/whl/cpu --break-system-packages
  506  df -h
  507  rm -rf ~/.cache/huggingface
  508  rm -rf ~/.cache/torch
  509  sudo apt clean
  510  sudo journalctl --vacuum-size=200M
  511  df -h
  512  python3 query_index.py
  513  clear
  514  ip a
  515  ls
  516  cd proxy-node/
  517  ls
  518  unicorn api:app --host 0.0.0.0 -port 8000 &
  519  sudo apt install unicorn
  520  df -h
  521  sudo apt install unicorn
  522  unicorn api:app --host 0.0.0.0 -port 8000 &
  523  ps -a
  524  unicorn api:app --host 0.0.0.0 -port 8000 &
  525  unicorn api:app --host 0.0.0.0 --port 8000 &
  526  uvicorn api:app --host 0.0.0.0 --port 8000 &
  527  ps -a
  528  kill 2518
  529  clear
  530  ls
  531  clear
  532  ps -a
  533  clear
  534  uvicorn api:app --host 0.0.0.0 --port 8000 &
  535  hostname -I
  536  ps -a
  537  kill 2530
  538  ps -a
  539  clear
  540  ps -a
  541  uvicorn api:app --host 0.0.0.0 --port 8000 &
  542  cd ..
  543  os
  544  clear
  545  ps -a
  546  clear
  547  cd proxy-node/
  548  ls
  549  clear
  550  uvicorn api:app --host 0.0.0.0 --port 8000 &
  551  clear
  552  ls
  553  ps -a
  554  clear
  555  ls
  556  uvicorn api:app --host 0.0.0.0 --port 8000 &
  557  ps -a
  558  lsof -i :8000
  559  ls
  560  cd ..
  561  cd WSTG-to-RAG/
  562  clear
  563  ps -a
  564  clear
  565  ls
  566  uvicorn rag_server:app --host 0.0.0.0 --port 8080
  567  ls
  568  cd ;s
  569  ls
  570  cd ScannerVPN/
  571  ls
  572  uvicorn rag_server:app --host 0.0.0.0 --port 8080
  573  ls
  574  cd
  575  quit
  576  ip a
  577  ls
  578  cd ScannerVPN/
  579  ls
  580  cd scanner-node-api/
  581  ls
  582  clear
  583  curl -f http:10.0.0.1:8000/health
  584  curl -f http://127.0.0.1:8000/health
  585  ip a
  586  sudo docker ps
  587  ip a
  588  sudo docker ps
  589  ip a
  590  sudo docker ps 
  591  cd
  592  ls
  593  cd WSTG-to-RAG
  594  ls
  595  clear
  596  ls
  597  cat rag_server.py 
  598  ip a
  599  history 
  600  history | echo > history.txt
  601  ls
  602  vi history.txt 
  603  hisory 
  604  history
  605  history > ../mini-ai-openai-demo/history.txt
